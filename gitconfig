[color]
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[alias]
  # add / remove
  a = add                           # add
  remove = add -u                   # remove
  r = add -u                        # remove

  # branch
  br = branch                       # branch
  recent = branch --sort=-committerdate --format=\"%(committerdate:relative)%09%(refname:short)\"
  branch-name = "!git rev-parse --abbrev-ref HEAD" # print current branch name
  delete-merged = "!git branch --merged main | grep -v main | xargs -I% git branch -d %"
  delete-merged-master = "!git branch --merged master | grep -v master | xargs -I% git branch -d %"
  delete-merged-remotes = "!git branch --remotes --merged=main | grep origin | grep -v 'origin/main' | sed 's|origin/||' | xargs -I% git push origin :%"
  delete-merged-remotes-master = "!git branch --remotes --merged=master | grep origin | grep -v 'origin/master' | sed 's|origin/||' | xargs -I% git push origin :%"

  # commit
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  amend = commit --amend            # amend your last commit
  append = commit --amend -C HEAD   # append changes to previous commit

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick                  # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  dt = difftool                     # use difftool
  last = diff HEAD^                 # diff last committed change

  # log
  l = log --oneline --decorate --graph --all -30
  ll = log --oneline --decorate --graph --all
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  changelog = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  # pull
  pl = pull                         # pull

  # push
  ps = push                         # push
  pf = push --force-with-lease      # try pushing forcefully
  pff = push --force                # push forcefully
  publish = "!f() { git push -u ${1-origin} $(git branch-name); }; f"  # publish branch to remote

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  remote = remote -v                # show remotes (verbose)

  # reset
  hard = reset --hard               # reset all changes
  unstage = reset HEAD              # remove files from index (tracking)
  undo = reset --soft HEAD^         # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sp = stash pop                    # apply and remove last stash
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # release
  release = "!f() { git push --force origin HEAD:$1; }; f"
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
  prompt = false
[mergetool "mvimdiff"]
  cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
  keepbackup=false
[merge]
  summary = true
  verbosity = 1
  tool = mvimdiff
[apply]
  whitespace = nowarn
[branch]
  autosetupmerge = true
  autosetuprebase = always
[branch "master"]
	mergeoptions = --no-ff --no-edit
[branch "next"]
	mergeoptions = --no-ff --no-edit
[branch "staging"]
	mergeoptions = --no-ff --no-edit
[pull]
  rebase = true
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = tracking
[core]
  autocrlf = false
  excludesfile = ~/.gitignore
[advice]
  statusHints = false
  skippedCherryPicks = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  tool = difftastic
[difftool]
  prompt = false
[difftool "difftastic"]
  cmd = difft "$LOCAL" "$REMOTE"
[pager]
  difftool = true
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "git://github.com/"
  pushInsteadOf = "https://github.com/"
[url "git@bitbucket.org:"]
  insteadOf = "bb:"
  pushInsteadOf = "git://bitbucket.org/"
  pushInsteadOf = "https://bitbucket.org/"
[url "git@heroku.com:"]
  insteadOf = "heroku:"
[filter "media"]
	clean = git media clean %f
	smudge = git media smudge %f
	required = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[commit]
	gpgsign = true
[rebase]
	autoStash = true
[log]
	date = iso
[init]
	defaultBranch = main
[gpg]
	program = gpg
